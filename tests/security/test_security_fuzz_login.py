import pytest
import allure
from http import HTTPStatus
from faker import Faker

fake = Faker()

@allure.epic('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏/–õ–æ–≥–∏–Ω')
@allure.feature('–§–∞–∑–∑–∏–Ω–≥ –ª–æ–≥–∏–Ω–∞')
class TestLoginFuzzing:

    @allure.story("–§–∞–∑–∑–∏–Ω–≥ SQL/XSS –∏–Ω—ä–µ–∫—Ü–∏–∏")
    @pytest.mark.parametrize("email, password", [
        ("' OR '1'='1", "password"), #SQLi
        ("test@test.com", "' OR 1=1--"),
        ("admin@example.com", "<script>alert('xss')</script>"), #XSS
        ("<img src=x onerror=alert(1)>", "123456"),
        ("<svg/onload=alert(1)>", "pass"),
        ("../../../../etc/passwd", "root"), #Path traversal
        ("test'; DROP TABLE users;--", "test"),
        ("\"; exec xp_cmdshell('dir');--", "test"),
        ("<iframe src=javascript:alert(1)>", "pass"),
        ("‚ò†Ô∏èüíÄüî•", "üí£üí•"), #–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —é–Ω–∏–∫–æ–¥
    ])
    def test_login_with_fuzzing_payloads(self, login_api, email, password, logger):
        with allure.step(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å email={email}"):
            response = login_api.login_user(email=email, password=password)
            logger.info(f"[Fuzz] Email: {email}, Password: {password}")
            logger.info(f"[Fuzz] –û—Ç–≤–µ—Ç: {response.status_code} - {response.text}")

            # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–≤–µ—Ä–≥–Ω–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥
            assert response.status_code in [HTTPStatus.BAD_REQUEST, HTTPStatus.UNAUTHORIZED]
            assert "<script>" not in response.text
            assert "DROP TABLE" not in response.text

    @allure.story("–§–∞–∑–∑–∏–Ω–≥ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é faker")
    @pytest.mark.parametrize("attempt", range(10)) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –ø–∞—Ä
    def test_login_with_random_input(self, login_api, attempt, logger):
        email = fake.user_name() + fake.random_element(elements=["@test.com", "@example.com"])
        password = fake.password(length=32, special_chars=True, digits=True, upper_case=True, lower_case=True)

        with allure.step(f"Faker –ª–æ–≥–∏–Ω –ø–æ–ø—ã—Ç–∫–∞ #{attempt + 1}"):
            response = login_api.login_user(email=email, password=password)
            logger.info(f"[Faker #{attempt}] Email: {email}, Password: {password}")
            logger.info(f"[Faker #{attempt}] –û—Ç–≤–µ—Ç: {response.status_code} - {response.text}")

            assert response.status_code in [HTTPStatus.BAD_REQUEST, HTTPStatus.UNAUTHORIZED]
