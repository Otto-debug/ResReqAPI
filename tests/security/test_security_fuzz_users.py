import pytest
import allure
from http import HTTPStatus
from faker import Faker

fake = Faker()

@allure.epic("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å API/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@allure.feature("–§–∞–∑–∑–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
class TestUsersFuzzing:

    @allure.story("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º–∏")
    @pytest.mark.parametrize("payload", [
        {"name": "' OR 1=1--", "job": "admin"},
        {"name": "<script>alert(1)</script>", "job": "developer"},
        {"name": fake.name(), "job": "<svg/onload=alert(1)>"},
        {"name": "../../etc/passwd", "job": "root"},
        {"name": fake.text(max_nb_chars=1000), "job": fake.text(max_nb_chars=1000)},  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        {"name": fake.pystr(min_chars=1, max_chars=1), "job": ""},  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        {"name": "‚ò†Ô∏èüíÄüî•", "job": "üí£üí•"}
    ])
    def test_create_user_with_fuzz_data(self, user_api, payload, logger):
        with allure.step(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {payload}"):
            response = user_api.create_user(payload)
            logger.info(f"[Fuzz Create] Payload: {payload}")
            logger.info(f"[Fuzz Create] –û—Ç–≤–µ—Ç: {response.status_code} - {response.text}")

            assert response.status_code in [
                HTTPStatus.CREATED,
                HTTPStatus.BAD_REQUEST,
                HTTPStatus.UNAUTHORIZED,
                HTTPStatus.UNPROCESSABLE_ENTITY]

            if response.status_code == HTTPStatus.CREATED:
                json_data = response.json()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –æ—Ç—Ä–∞–∂–µ–Ω–∏–π
                for val in payload.values():
                    assert val not in (json_data.values()), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Ä–∞–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"

    @allure.story("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏")
    @pytest.mark.parametrize("update_data", [
        {"name": "'; DROP TABLE users;--", "job": "intruder"},
        {"name": "<iframe src='evil.com'>", "job": "xss_test"},
        {"name": fake.name(), "job": fake.text(max_nb_chars=500)},
        {"name": "", "job": " "},
        {"name": "üíÄüíÄüíÄ", "job": "üî•üî•üî•"},
    ])
    def test_update_user_with_fuzz_data(self, user_api, update_data, logger):
        user_id = 2

        with allure.step(f"–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={user_id} —Å –¥–∞–Ω–Ω—ã–º–∏: {update_data}"):
            response = user_api.update_user(user_id=user_id, user_data=update_data)
            logger.info(f"[Fuzz Update] Payload: {update_data}")
            logger.info(f"[Fuzz Update] –û—Ç–≤–µ—Ç: {response.status_code} - {response.text}")

            assert response.status_code in [
                HTTPStatus.OK,
                HTTPStatus.BAD_REQUEST,
                HTTPStatus.UNPROCESSABLE_ENTITY
            ]

            if response.status_code == HTTPStatus.OK:
                response_data = response.json()
                for val in update_data.values():
                    assert val in response_data.values(), "–ù–∞–π–¥–µ–Ω–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"

    @allure.story("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º ID")
    @pytest.mark.parametrize("user_id", [
        "1; DROP TABLE users",
        "abc<script>",
        "../../etc/passwd",
        "üíÄüí£üî•",
        999999999999999999,  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π ID
        "",  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        None
    ])
    def test_delete_user_with_fuzzed_id(self, user_api, user_id, logger):
        with allure.step(f"–ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            try:
                response = user_api.delete_user(user_id=user_id)
            except Exception as e:
                logger.warning(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ DELETE /api/users/{user_id}: {e}")

            logger.info(f"[Fuzz Delete] –û—Ç–≤–µ—Ç: {response.status_code}")
            assert response.status_code in [
                HTTPStatus.NO_CONTENT,
                HTTPStatus.BAD_REQUEST,
                HTTPStatus.NOT_FOUND
            ]